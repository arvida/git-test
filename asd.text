
`fix test`

eller

`Added some stats to dashboard`

eller

:sob:

Problemet är när man ett halv år senare upptäcker en bug som introducerades i commiten `Added some stats on dashboard` som är 17 ändrade filer med 231 tillagda rader and 29 raderade rader. 

Då sitter man där och får försöka fatta vad man egentligen hade för idé för ett år sedan och varför man gjorde just så här.

Och hade man lagt lite mer tid på sitt commit meddelande för den commiten hade det kanske varit lite lättare att förstå varför.

Jag gör sådant här också och många andra. Det handlar ofta om ovana och att man kanske inte riktigt att tänkt på att man faktiskt har möjlighet att skriva en hel del i sina commit meddelanden.


# Hur ska man tänka då

Först gäller det att dela upp sitt jobb i lagom stora commits så att det går att beskriva förändringen med en titel och några meningar. Börjar det det kännas svårt att beskriva en förändring är det ett tecken på att den kanske går att dela upp flera mindre commits.

Jag har börjat försöka tänka på mina commits lite som mail till mig själv som jag kommer att läsa om ett år eller så. Varje commit meddelande har ett ämne och ett innehåll. Finns förändringen jag gjort beskriven som en issue på github referar jag till den. 

Jag har funderat en del på det här och försökt läsa på hur handra gör vad det finns för best pratices. Det finns inget sätt som är 100% rätt.

## Delar

Ett format som jag tycker fungerar bra är så här:

1. Börjar med en titel eller ämne, som ska vara ungefär 70 tecken lång. De flesta ställen där man kan se git commits räknar med att ämnet är runt 50 tecken, github kan visa ämnen på max 70 tecken.
1.2 Om commiten har något att göra med en issue så lägger jag en referens till den först i ämnet
1.3 Ämnet ska vara en kort sammanfattning på ändringarna som commiten gjort. Tekniska detaljer kan man spara till innehållet.
1.4 Ämnet ska inte avslutas med en punkt. 
1.5 Ämnet är den delen av commiten som visas mest så det är bra lägga tid på att få den lättförståelig och tydlig.

2. En tom rad

3. Innehållet. Här skriver man en lite längre beskrivning av förändringen. 
3.1 Vad är bakgrunden till förändringen.
3.2 Varför har valt att göra på ett specifikt sätt. 
3.3 Finns det något som kan vara bra att tänka när man kollar på förändringen, något som är oklart eller lätt att missa?
3.4 Använd gärna punktlistor för att göra det tydligt.

## Tempus

Man brukar säga att man ska skriva commit meddelanden i imperativ form. Dvs att man uttrycker sig uppmanande,  t.ex. att man använder “fix” istället för “fixed” eller “add” istället för “added”. 

Man kan säga att det finns två starka wins med att använda imperativ.

1. Det är så git uttrycker sig när den automatiska commit meddelanden som t.ex. “Merge branch 'master' of github.com:example/app”. Och det är för att man beskriver vad ändringar gör när den appliceras, inte att vad den gjorde eller vad som kommer att hända utan det här gör den.
2. Och bestämmer man sig för ett tempus slipper man fundera varje gång.

# Avslut

Det finns inga sätt som är mer rätt eller fel. Men jag har märkt att när jag lägger mer tid på mina commit meddelanden blir jag tvungen att reflektera mer över förändringarna jag gör i ett projekt. Man får tänka till en extra gång.

Det blir otroligt mkt trevligare att gå igenom en git log som faktist berättar om förändringarna och inte bara att något har hänt.

Huvudsaken tror jag är inse vilket fanatiskt verktyg git är och hur man kan använda commit meddelanden som ett verktyg för att dokumentera och förstå ett projekts historik.


# Resurser

Tim Popes: “A Note About Git Commit Messages”
http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

Riktlinjer för att göra patchat till Git
http://git.kernel.org/cgit/git/git.git/tree/Documentation/SubmittingPatches
